{"mappings":"ACGA,IAAM,EAAS,SAAS,gBAAgB,CAAC,SAkBpC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAY,AAlBE,SAAC,CAAvB,EACE,IAAI,EAAU,GAET,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,AACC,CAAA,IAAO,EAAG,WAAW,GACvB,GAAW,IAAM,EAEjB,GAAW,C,C,C,M,E,CAJV,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAUL,OAFA,EAAU,CAAO,CAAC,EAAE,CAAC,WAAW,GAAK,EAAQ,KAAK,CAAC,EAGrD,EAIkC,EAAM,IAAI,EAE1C,EAAM,UAAU,CAAC,MAAM,CAAC,GACxB,EAAM,YAAY,CAAC,cAAe,GAElC,EAAM,YAAY,CAAC,MAAQ,GAAW,MAAA,CAAT,EAAM,EAAE,GACrC,EAAM,WAAW,CAAG,EACpB,EAAM,SAAS,CAAC,GAAG,CAAC,cACtB,C,C,M,E,CAVK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// write code here\nvar inputs = document.querySelectorAll(\"input\");\nvar normalizeName = function(currentName) {\n    var newName = \"\";\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = currentName[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var ch = _step.value;\n            if (ch === ch.toUpperCase()) newName += \" \" + ch;\n            else newName += ch;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    newName = newName[0].toUpperCase() + newName.slice(1);\n    return newName;\n};\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var input = _step.value;\n        var label = document.createElement(\"label\");\n        var labelName = normalizeName(input.name);\n        input.parentNode.append(label);\n        input.setAttribute(\"placeholder\", labelName);\n        label.setAttribute(\"for\", \"\".concat(input.id));\n        label.textContent = labelName;\n        label.classList.add(\"field-label\");\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\n\n//# sourceMappingURL=index.3a3bb2b5.js.map\n","'use strict';\n\n// write code here\nconst inputs = document.querySelectorAll('input');\n\nconst normalizeName = (currentName) => {\n  let newName = '';\n\n  for (const ch of currentName) {\n    if (ch === ch.toUpperCase()) {\n      newName += ' ' + ch;\n    } else {\n      newName += ch;\n    }\n  }\n\n  newName = newName[0].toUpperCase() + newName.slice(1);\n\n  return newName;\n};\n\nfor (const input of inputs) {\n  const label = document.createElement('label');\n  const labelName = normalizeName(input.name);\n\n  input.parentNode.append(label);\n  input.setAttribute('placeholder', labelName);\n\n  label.setAttribute('for', `${input.id}`);\n  label.textContent = labelName;\n  label.classList.add('field-label');\n}\n"],"names":["inputs","document","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","input","value","label","createElement","labelName","normalizeName","currentName","newName","ch","toUpperCase","err","return","slice","name","parentNode","append","setAttribute","concat","id","textContent","classList","add"],"version":3,"file":"index.3a3bb2b5.js.map"}